[tool.poetry]
name = "python_app_template"
version = "0.0.1"
description = "A basic python app template for all my python projects."
authors = ["Cameron Garretson <camerontgarretson@gmail.com>"]
license = "MIT"
readme = "README.md"

# copied from https://docs.astral.sh/ruff/configuration/
# for explicitness
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 100
indent-width = 4
show-fixes = true

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
  "E",     # pycodestyle (error)
  "W",     # pycodestyle (warning) 
  "F",     # pyflakes
  "C90",   # mccabe
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ANN",   # flake8-annotations
  "ASYNC", # flake8-async
  "TRIO",  # flake8-trio
  "S",     # bandit
  "BLE",   # flake8-blind-except
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "COM",   # flake8-commas
  # "CPY",   # flake8-copyright
  "C4",    # flake8-comprehensions
  "DTZ",   # flake8-datetimez
  "T10",   # flake8-debugger
  "DJ",    # flake8-django
  "EM",    # flake8-errmsg
  "EXE",   # flake8-executable
  "FA",    # flake8-future-annotations
  "ISC",   # flake8-implicit-str-concat
  "ICN",   # flake8-import-conventions
  "G",     # flake8-logging-format
  "INP",   # flake8-no-pep420
  "PIE",   # flake8-pie
  "T20",   # flake8-print
  # "PYI",   # flake8-pyi
  "PT",    # flake8-pytest
  "Q",     # flake8-quotes
  "RSE",   # flake8-raise
  "RET",   # flake8-return
  "SLF",   # flake8-self
  "SLOT",  # flake8-slot
  "SIM",   # flake8-simplify
  "TID",   # flake8-tidy-imports
  "TCH",   # flake8-type-checking
  "INT",   # flake8-gettext
  "ARG",   # flake8-unused-arguments
  "PTH",   # flake8-use-pathlib
  "FIX",   # flake8-fixme
  "ERA",   # flake8-eradicate
  "PD",    # flake8-pandas-vet
  "PGH",   # flake8-pygrep-hooks
  "PL",    # pylint
  "TRY",   # tryceratops
  "FLY",   # flynt
  "NPY",   # NumPy-specific rules
  "AIR",   # Airflow
  "PERF",  # Perflint
  # "FURB",  # refurb
  "LOG",   # flake8-logging
  "RUF",   # Ruff-specific rules
]
ignore = [
  "ANN101", # Missing type annotation for self in method - deprecated
  "ANN102", # Missing type annotation for cls in classmethod - deprecated
  "D211",   # No blank lines allowed before class docstring
  "D213",   # Multi-line docstring summary should start at the second line
  "COM812", # Missing trailing comma in a list - ruff has a hard time with this
  "ISC001", # Implicit string concatenation - ruff has a hard time with this
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
# set env vars
# TEST_ENV = "blah"
# inject commands
addopts = "--cov=$project --cov-report html --cov-fail-under=100 -n auto"
testpaths = ["test"]  

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
ruff = "*"  # https://docs.astral.sh/ruff/configuration/
# pytest
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-profiling = "*"
pytest-randomly = "*"
# the rest...
build = "*"
coverage = "*"
pre-commit = "*"  # https://pre-commit.com/

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
